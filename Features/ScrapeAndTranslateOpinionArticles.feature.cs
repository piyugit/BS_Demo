// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BS_TechAssement_WebScrapping.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ScrapeAndTranslateOpinionArticles")]
    public partial class ScrapeAndTranslateOpinionArticlesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ScrapeAndTranslateOpinionArticles", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ScrapeAndTranslateOpinionArticles.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scrape and Translate Opinion Articles")]
        [NUnit.Framework.CategoryAttribute("browser:chrome_desktop")]
        public async System.Threading.Tasks.Task ScrapeAndTranslateOpinionArticles()
        {
            string[] tagsOfScenario = new string[] {
                    "browser:chrome_desktop"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Scrape and Translate Opinion Articles", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
    await testRunner.GivenAsync("I visit the El País homepage", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
    await testRunner.ThenAsync("I verify the page is displayed in Spanish", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 6
    await testRunner.WhenAsync("I navigate to the Opinion section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
    await testRunner.AndAsync("I fetch the first 1 articles", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
    await testRunner.ThenAsync("I print the Spanish titles and content of each article", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 9
    await testRunner.AndAsync("I download the cover image of each article if available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
    await testRunner.WhenAsync("I translate each article title to English", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
    await testRunner.ThenAsync("I print the translated headers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
    await testRunner.ThenAsync("I print any words repeated more than twice across all translated headers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scrape and Translate Opinion Articles on <Browsers>")]
        [NUnit.Framework.TestCaseAttribute("chrome_desktop", null)]
        [NUnit.Framework.TestCaseAttribute("firefox_desktop", null)]
        [NUnit.Framework.TestCaseAttribute("ipad", null)]
        [NUnit.Framework.TestCaseAttribute("android", null)]
        [NUnit.Framework.TestCaseAttribute("iphone", null)]
        public async System.Threading.Tasks.Task ScrapeAndTranslateOpinionArticlesOnBrowsers(string browsers, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Browsers", browsers);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Scrape and Translate Opinion Articles on <Browsers>", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
    await testRunner.GivenAsync("I visit the El País homepage", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 18
    await testRunner.ThenAsync("I verify the page is displayed in Spanish", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 19
    await testRunner.WhenAsync("I navigate to the Opinion section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
    await testRunner.AndAsync("I fetch the first 1 articles", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.ThenAsync("I print the Spanish titles and content of each article", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 22
    await testRunner.AndAsync("I download the cover image of each article if available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.WhenAsync("I translate each article title to English", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
    await testRunner.ThenAsync("I print the translated headers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
    await testRunner.ThenAsync("I print any words repeated more than twice across all translated headers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
